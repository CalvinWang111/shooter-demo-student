// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey }
        maskTexture:    { value: grey }
        flashTintColor: { value: [1, 1, 1, 1], linear: true, editor: { type: color }}
        flashTexture:   { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        tilingOffset01:   { value: [1, 1, 0, 0] }
        flashRotateDelta: { value: 0.0 }
        flashSpeed:     { value: 1.5 }
        rimColor:       { value: [1, 1, 1, 0], linear: true, editor: { type: color } }
        rimExp:         { value: 2.7, target: rimParam.x }
        rimScale:       { value: 1.5, target: rimParam.y }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        tintColor:              { value: [0.5, 0.5, 0.5, 0.5], editor: { type: color } }
        noiseTintColor:         { value: [0.5, 0.5, 0.5, 0.5], editor: { type: color } }
        noiseTexture:           { value: grey }
        noiseFloatSpeed: { value: 1.0  }
        offsetEdge:             { value: 0.0  }
        noiseEdgeWidth_Max:       { value: 0.5, target: noiseEdgeWidth.x }
        noiseEdgeWidth_Min:       { value: 0.5, target: noiseEdgeWidth.y }
        dissolveThreshold:      { value: 0.5, editor: {range:[-0.2, 1, 0.01], slide:  true , tooltip:  'dissolution threshold'  }}
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, linear: true, editor: { visible: false } } # backward compability
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
    - &shadow-caster
      vert: shadow-caster-vs:vert
      frag: shadow-caster-fs:frag
      phase: shadow-caster
      propertyIndex: 0
      rasterizerState:
        cullMode: front
      properties:
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        mainTexture:    { value: grey }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram shared-ubos %{
  uniform Dissolve {
    float dissolveThreshold;
    float noiseFloatSpeed;
    vec2  noiseEdgeWidth;
    float offsetEdge;
  };

}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/fog-vs>
  #include <shared-ubos>

  

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

  #if USE_RIM_LIGHT
    out vec3 v_worldNormal;
    out vec3 v_worldPos;
  #endif

  #if USE_SHINY_UV_SECOND
    in vec2 a_texCoord1; //Fetch app_UV01
    out vec2 v_uv1;
    uniform ShinyUVSecond {
      vec4 tilingOffset01;
      float flashRotateDelta;
    };
  #endif


  vec4 vert () {
    StandardVertInput In; 
    CCVertInput(In);

    #if USE_RIM_LIGHT
      mat4 matWorld, matWorldIT;
      CCGetWorldMatrixFull(matWorld, matWorldIT);
    #else
      mat4 matWorld;
      CCGetWorldMatrix(matWorld);
    #endif

    #if USE_RIM_LIGHT
      v_worldNormal = normalize((matWorldIT * vec4(In.normal, 0.)).xyz);
      v_worldPos = (matWorld * In.position).xyz;
    #endif

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    #if USE_SHINY_UV_SECOND
      v_uv1 = a_texCoord1 * tilingOffset01.xy + tilingOffset01.zw;

      #if ENABLE_ROTATE
        vec2 pivot = vec2(0.5, 0.5);
        v_uv1 -= pivot; // 置中

        float cos_value = cos(flashRotateDelta);
        float sin_value = sin(flashRotateDelta);
        v_uv1 = vec2(v_uv1.x * cos_value - v_uv1.y * sin_value, v_uv1.x * sin_value + v_uv1.y * cos_value);
        v_uv1 += pivot;
      #endif

      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv1);
      #endif
    #endif


    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    CC_TRANSFER_FOG(matWorld * In.position);
    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/output-standard>
  #include <legacy/fog-fs>
  #include <shared-ubos>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  #if USE_SHINY_UV_SECOND
    in vec2 v_uv1;
    uniform sampler2D flashTexture;
    uniform sampler2D maskTexture;
    uniform UseShinyUV {
      vec4 flashTintColor;
      float flashSpeed;
    };
  #endif

  
  #if USE_DISSOVEFUNC
    uniform sampler2D noiseTexture;
    uniform FragConstants {
    vec4 tintColor;
    vec4 noiseTintColor;
  };
  #endif
  


  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  #if USE_RIM_LIGHT
    in vec3 v_worldPos;
    in vec3 v_worldNormal;
    uniform RimLightValue {
      vec4 rimColor;
      vec4 rimParam;
    };
  #endif

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  vec4 frag () {
    vec4 o = mainColor;

    #if USE_SHINY_UV_SECOND
      vec2 uv1 = v_uv * 10.0;
      uv1.y -= cc_time.x * flashSpeed;
      vec4 maskColor = texture(maskTexture, v_uv);  // Base on MainTexture UV0
      vec4 flashColor = texture(flashTexture, uv1);
      float grayflash = dot(flashColor.rgb, vec3(0.299, 0.587, 0.114));  // gray
      vec4 grayflashColor = vec4(grayflash, grayflash, grayflash, flashColor.a);  // gray
      flashColor.rgb = SRGBToLinear(grayflashColor.rgb);  // gray
      flashColor = flashColor + (flashColor * flashTintColor * (flashTintColor.a * 3.0));  // TintFlash
      
      if (maskColor.b > .02) {
        o.rgb = o.rgb * .7 + o.rgb * (flashColor.rgb * 1.5);
      }
    #endif


    #if USE_DISSOVEFUNC
//UV_offset
  //UV
    vec2 f_uv = v_uv;
    f_uv -= cc_time.x * 1.0 * noiseFloatSpeed; // 斜向移動
    vec2 f_uv2 = v_uv;
    f_uv2 -= cc_time.x * 1.5 * noiseFloatSpeed; 

  //MainColor
  // //Noise Process
    vec4 mainColor = texture( mainTexture, v_uv );
    vec4 noiseTexColor = texture( noiseTexture, f_uv);
    vec4 noiseTexColor2 = texture( noiseTexture, f_uv2);
    vec4 noiseTexColorMix = noiseTexColor * noiseTexColor2;
  //Step
    vec4 stepColor = vec4(1,1,1,1) * step( dissolveThreshold, noiseTexColorMix.r );
    vec4 displayArea = vec4(1,1,1,1) - stepColor;
  //Smooth
    vec4 smoothStepColor = vec4(1,1,1,1) * smoothstep(  noiseEdgeWidth.x + offsetEdge + dissolveThreshold, noiseEdgeWidth.y + offsetEdge + dissolveThreshold, noiseTexColorMix.r ) - displayArea;
  //Combine 
    o =  ( mainColor * displayArea * tintColor ) + ( smoothStepColor * noiseTintColor ); 

    #endif






    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif

    #if USE_RIM_LIGHT
      if (rimColor.w > 0.0) {  // static branch
        vec3 worldNor = normalize(v_worldNormal);
        vec3 viewDir = normalize(cc_cameraPos.xyz - v_worldPos);
        float theta = 1. - clamp(0., 1., dot(worldNor, viewDir));
        o.rgb = mix(o.rgb, rimColor.rgb * rimParam.y, rimColor.w * pow(theta, rimParam.x));
      }
    #endif

    CC_APPLY_FOG(o);
    return CCFragOutput(o);
  }
}%

CCProgram shadow-caster-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <builtin/uniforms/cc-shadow>

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif
  out vec4 v_worldPos;
  out highp vec2 v_clip_depth;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    v_worldPos = matWorld * position;
    vec4 clipPos = cc_matLightViewProj * v_worldPos;

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    v_clip_depth = clipPos.zw;

    return clipPos;
  }
}%

CCProgram shadow-caster-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <common/data/packing>
  #include <legacy/shadow-map-base>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif
  in vec4 v_worldPos;
  in highp vec2 v_clip_depth;

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  vec4 frag () {
    vec4 o = mainColor;

    #if USE_ALPHA_TEST
      #if USE_TEXTURE
        o *= texture(mainTexture, v_uv);
      #endif
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif

    highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;
    // spot use linear
    if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {
      // enabled linear depth
      #if CC_SHADOWMAP_USE_LINEAR_DEPTH
        clipDepth = CCGetLinearDepth(v_worldPos.xyz);
      #endif
    }

    #if CC_SHADOWMAP_FORMAT == SHADOWMAP_FORMAT_RGBA8
      return packDepthToRGBA(clipDepth);
    #else
      return vec4(clipDepth, 1.0, 1.0, 1.0);
    #endif
  }
}%
