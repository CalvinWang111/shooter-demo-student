// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: standard-vs
      frag: standard-fs
      properties: &props
        tilingOffset:         { value: [1.0, 1.0, 0.0, 0.0] }
        mainColor:            { value: [1.0, 1.0, 1.0, 1.0], target: albedo, linear: true, editor: { displayName: Albedo, type: color } }
        albedoScale:          { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold:       { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST, slide: true, range: [0, 1.0], step: 0.001 } }
        mainTexture:          { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
        normalTexture:        { value: grey }
        shineTexture:         { value: grey }
    - &forward-add
      vert: standard-vs
      frag: standard-fs
      phase: forward-add
      propertyIndex: 0
      embeddedMacros: { CC_FORWARD_ADD: true }
      depthStencilState:
        depthFunc: equal
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one
          blendSrcAlpha: zero
          blendDstAlpha: one
    - &shadow-caster
      vert: shadow-caster-vs:vert
      frag: shadow-caster-fs:frag
      phase: shadow-caster
      propertyIndex: 0
      rasterizerState:
        cullMode: front
      properties:
        tilingOffset:   { value: [1.0, 1.0, 0.0, 0.0] }
        mainColor:      { value: [1.0, 1.0, 1.0, 1.0], target: albedo, editor: { displayName: Albedo, type: color } }
        albedoScale:    { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        mainTexture:    { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
  - name: transparent
    passes:
    - vert: standard-vs
      frag: standard-fs
      embeddedMacros: { CC_FORCE_FORWARD_SHADING: true }
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
    - *forward-add
    - *shadow-caster
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 albedo;
    vec4 albedoScaleAndCutoff;
    vec4 tilingOffset;
  };
}%

CCProgram standard-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <shared-ubos>
  #include <legacy/fog-vs>
  #include <legacy/shadow-map-vs>

  #if USE_VERTEX_COLOR
    in vec4 a_color;
    out lowp vec4 v_color;
  #endif

  out vec3 v_position;
  out mediump vec3 v_normal;
  out vec2 uv0;
  out vec2 v_uv;
  #if HAS_SECOND_UV
    out mediump vec2 v_uv1;
  #endif

  #if CC_RECEIVE_SHADOW
    out mediump vec2 v_shadowBias;
  #endif

  #if HAS_SECOND_UV
    in vec2 a_texCoord1;
  #endif

  void main () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;
    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);

    #if CC_RECEIVE_SHADOW
      v_shadowBias = CCGetShadowBias();
    #endif

    #if USE_TWOSIDE
      vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);
      v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;
    #endif

    uv0 = a_texCoord;
    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif
    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv1);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    CC_TRANSFER_FOG(pos);
    CC_TRANSFER_SHADOW(pos);

    gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram standard-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <shared-ubos>
  #include <legacy/fog-fs>

  // #include <legacy/standard-surface-entry>  // 展開如下
  #include <legacy/shading-standard-base>
  #include <legacy/output-standard>
  #include <legacy/shadow-map-fs>

  in vec3 v_position;
  in vec2 uv0;
  in vec2 v_uv;
  #if HAS_SECOND_UV
    in mediump vec2 v_uv1;
  #endif
  in mediump vec3 v_normal;

  #if CC_RECEIVE_SHADOW
    in mediump vec2 v_shadowBias;
  #endif

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
    #pragma define-meta ALBEDO_UV options([v_uv, v_uv1])
    uniform sampler2D normalTexture;
    uniform sampler2D shineTexture;
  #endif

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  #endif

  vec3 getNormal(vec4 norm) {
    return normalize(norm.rgb * 2.0 - 1.0);  // mapping to vec3(-1) ~ vec3(1)
  }

  float calcVignette(vec2 pixCoord, vec4 borderExtent, float smoothValue) {
    vec4 rect = vec4(borderExtent.xy, 1. - (borderExtent.xy + borderExtent.zw));
    vec4 rectSmooth = smoothstep(rect - smoothValue, rect + smoothValue, vec4(pixCoord, 1. - pixCoord));
    return rectSmooth.x * rectSmooth.y * rectSmooth.z * rectSmooth.w;
  }

  void surf (out StandardSurface s) {
    vec4 baseColor = albedo;
    #if USE_VERTEX_COLOR
      baseColor.rgb *= SRGBToLinear(v_color.rgb); // use linear
      baseColor.a *= v_color.a;
    #endif
    #if USE_ALBEDO_MAP
      vec4 o = baseColor;
      vec2 offset = vec2(cc_time.x * .05, 0.);
      vec2 b1 = getNormal(texture(normalTexture, v_uv * .8 + offset)).xy;
      vec2 b2 = getNormal(texture(normalTexture, v_uv * .4 - offset * .2)).xy;

      vec2 water_uv = v_uv + offset * 1.5 + ((b1 + b2) * .15);
      vec4 texColor = texture(albedoMap, water_uv);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      o *= texColor;

      float mixing = texture(shineTexture, (b1 + b2) * 1.2).a;
      float t = clamp(mixing * .92, 0., 1.);
      vec3 sun = mix(vec3(1.), o.rgb, .9) * 6.;   // 亮光顏色
      vec3 shine = mix(o.rgb, sun, pow(t, 8.));
      o.rgb = shine;

      // vignette
      vec2 vigParam = vec2(.1, .3);    // borderExtent, borderHardness
      float vig = calcVignette(uv0, vec4(vec2(vigParam.x), vec2(1. - vigParam.x * 2.)), vigParam.y);
      o.rgb *= vig;

      baseColor = o;
    #endif
    s.albedo = baseColor;
    s.albedo.rgb *= albedoScaleAndCutoff.xyz;

    #if USE_ALPHA_TEST
      if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

    s.normal = v_normal;

    #if CC_RECEIVE_SHADOW
      s.shadowBias = v_shadowBias;
    #endif

    HIGHP_VALUE_TO_STRUCT_DEFINED(v_position, s.position);
  }

  vec4 MyUnlitShadingBase (StandardSurface s, vec4 shadowPos) {
    vec3 diffuse = s.albedo.rgb;

    vec3 position;
    HIGHP_VALUE_FROM_STRUCT_DEFINED(position, s.position);

    vec3 N = normalize(s.normal);
    vec3 V = normalize(cc_cameraPos.xyz - position);
    vec3 L = normalize(-cc_mainLitDir.xyz);
    float NL = max(dot(N, L), 0.0);

    float shadow = 1.0;
    #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == CC_SHADOW_MAP
      if (NL > 0.0 && cc_mainLitDir.w > 0.0) {
        if (cc_shadowLPNNInfo.w > 0.0) {
          #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_CASCADED
            shadow = CCCSMFactorBase(position, N, s.shadowBias);
          #endif
        } else {
          #if CC_DIR_LIGHT_SHADOW_TYPE == CC_DIR_LIGHT_SHADOW_UNIFORM
            shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);
          #endif
        }
      }
    #endif

    vec3 finalColor = diffuse * shadow;
    return vec4(finalColor, s.albedo.a);
  }

  // CC_STANDARD_SURFACE_ENTRY()  // 展開如下
  #if CC_FORWARD_ADD                                                 
    #include <legacy/shading-standard-additive>                             
    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1                       
    #include <legacy/shading-cluster-additive>                              
    #endif                                                           
                                                                    
    layout(location = 0) out vec4 fragColorX;                        
                                                                    
    void main () {                                                   
      StandardSurface s; surf(s);                                    
      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1                     
      vec4 color = CCClusterShadingAdditive(s, CC_SHADOW_POSITION);  
      #else                                                          
      vec4 color = CCStandardShadingAdditive(s, CC_SHADOW_POSITION); 
      #endif                                                         

      fragColorX = CCFragOutput(color);                              
    }                                                                
                                                                    
  #elif (CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_FORWARD || CC_FORCE_FORWARD_SHADING) 
                                                                    
    layout(location = 0) out vec4 fragColorX;                        
                                                                    
    void main () {                                                   
      StandardSurface s; surf(s);                                    
      vec4 color = CCFragOutput(MyUnlitShadingBase(s, CC_SHADOW_POSITION));     

      #if CC_USE_FOG != CC_FOG_NONE                                  
        CC_APPLY_FOG(color, s.position.xyz);                         
      #endif                                                         
      fragColorX = color;                                            
    }                                                                
                                                                    
  #elif CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_DEFERRED                
    #include <common/math/octahedron-transform>                                  
                                                                    
    layout(location = 0) out vec4 fragColor0;                        
    layout(location = 1) out vec4 fragColor1;                        
    layout(location = 2) out vec4 fragColor2;                        
                                                                    
    void main () {                                                   
      StandardSurface s; surf(s);                                    

      fragColor0 = s.albedo;                                         
      fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic); 
      fragColor2 = vec4(s.emissive, s.occlusion);                    
    }                                                                
                                                                    
  #endif
}%

CCProgram shadow-caster-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <shared-ubos>
  #include <builtin/uniforms/cc-shadow>

  #if HAS_SECOND_UV
    in vec2 a_texCoord1;
  #endif

  out vec2 v_uv;
  #if HAS_SECOND_UV
    out vec2 v_uv1;
  #endif
  out vec4 v_worldPos;
  out highp vec2 v_clip_depth;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    v_worldPos = matWorld * In.position;
    vec4 clipPos = cc_matLightViewProj * v_worldPos;

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;
    #endif

    v_clip_depth = clipPos.zw;

    return clipPos;
  }
}%

CCProgram shadow-caster-fs %{
  precision highp float;
  #include <shared-ubos>
  #include <common/data/packing>
  #include <legacy/shadow-map-base>

  in vec2 v_uv;
  #if HAS_SECOND_UV
    in vec2 v_uv1;
  #endif
  in vec4 v_worldPos;
  in highp vec2 v_clip_depth;

  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
    #pragma define-meta ALBEDO_UV options([v_uv, v_uv1])
  #endif

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  #endif

  vec4 frag () {
    vec4 baseColor = albedo;

    #if USE_ALPHA_TEST
      #if USE_ALBEDO_MAP
        baseColor *= texture(albedoMap, ALBEDO_UV);
      #endif
      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

    highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;
    // spot use linear
    if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {
      // enabled linear depth
      #if CC_SHADOWMAP_USE_LINEAR_DEPTH
        clipDepth = CCGetLinearDepth(v_worldPos.xyz);
      #endif
    }

    #if CC_SHADOWMAP_FORMAT == SHADOWMAP_FORMAT_RGBA8
      return packDepthToRGBA(clipDepth);
    #else
      return vec4(clipDepth, 1.0, 1.0, 1.0);
    #endif
  }
}%
